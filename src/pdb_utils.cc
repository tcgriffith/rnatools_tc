// ==============================================
// Load lots of parameters into the pdb_utils namespace
// required by PDB.cc
// ==============================================

#include "pdb_utils.h"

namespace pdb_utils{

    double hbond_cutoff=3.2; // hydrogen bond cutoff

    double Cm = 12;
    double Nm = 14;
    double Om = 16; 

// ==============================================
// smcra/RNA
// special RNA NTs
// ==============================================

    std::unordered_map<std::string,std::string> rna_specials({
        {"02I" ,"a"},
        {"08Q" ,"c"},
        {"08T" ,"a"},
        {"0AD" ,"g"},
        {"0C" ,"c"},
        {"0DC" ,"c"},
        {"0DG" ,"g"},
        {"0DT" ,"t"},
        {"0G" ,"g"},
        {"0KL" ,"u"},
        {"0KX" ,"c"},
        {"0KZ" ,"t"},
        {"0L3" ,"a"},
        {"0L4" ,"a"},
        {"0L5" ,"u"},
        {"0L6" ,"c"},
        {"0L7" ,"g"},
        {"0OH" ,"a"},
        {"0OJ" ,"a"},
        {"0R5" ,"t"},
        {"0R6" ,"c"},
        {"0R8" ,"c"},
        {"0U" ,"u"},
        {"0UH" ,"a"},
        {"10C" ,"c"},
        {"125" ,"t"},
        {"126" ,"t"},
        {"127" ,"t"},
        {"12A" ,"a"},
        {"18M" ,"g"},
        {"18Q" ,"u"},
        {"1AP" ,"a"},
        {"1CC" ,"c"},
        {"1FC" ,"c"},
        {"1FZ" ,"t"},
        {"1GC" ,"g"},
        {"1MA" ,"a"},
        {"1MG" ,"g"},
        {"1RN" ,"u"},
        {"1RT" ,"c"},
        {"1SC" ,"c"},
        {"1TL" ,"u"},
        {"1TW" ,"g"},
        {"23G" ,"g"},
        {"23T" ,"t"},
        {"2AD" ,"a"},
        {"2AR" ,"a"},
        {"2AT" ,"t"},
        {"2AU" ,"u"},
        {"2BA" ,"a"},
        {"2BD" ,"g"},
        {"2BP" ,"g"},
        {"2BT" ,"t"},
        {"2BU" ,"a"},
        {"2DA" ,"a"},
        {"2DT" ,"t"},
        {"2EG" ,"g"},
        {"2FE" ,"a"},
        {"2FI" ,"g"},
        {"2GT" ,"t"},
        {"2IA" ,"a"},
        {"2L8" ,"t"},
        {"2LA" ,"g"},
        {"2LF" ,"g"},
        {"2MA" ,"a"},
        {"2MG" ,"g"},
        {"2MU" ,"t"},
        {"2NT" ,"t"},
        {"2OT" ,"t"},
        {"2PR" ,"g"},
        {"2ST" ,"t"},
        {"365" ,"a"},
        {"3AD" ,"a"},
        {"3AT" ,"a"},
        {"3AU" ,"u"},
        {"3AY" ,"u"},
        {"3D1" ,"a"},
        {"3DA" ,"a"},
        {"3ME" ,"t"},
        {"3TD" ,"u"},
        {"40A" ,"a"},
        {"40C" ,"c"},
        {"40G" ,"g"},
        {"40T" ,"t"},
        {"47C" ,"c"},
        {"4BD" ,"t"},
        {"4DG" ,"g"},
        {"4DU" ,"a"},
        {"4OC" ,"c"},
        {"4PC" ,"u"},
        {"4SC" ,"c"},
        {"4SU" ,"u"},
        {"574" ,"a"},
        {"5AA" ,"a"},
        {"5AT" ,"t"},
        {"5BU" ,"u"},
        {"5CF" ,"c"},
        {"5CG" ,"g"},
        {"5CM" ,"c"},
        {"5FC" ,"c"},
        {"5FU" ,"u"},
        {"5GP" ,"g"},
        {"5HC" ,"c"},
        {"5HT" ,"t"},
        {"5HU" ,"t"},
        {"5IC" ,"c"},
        {"5IU" ,"u"},
        {"5MC" ,"c"},
        {"5MU" ,"u"},
        {"5NC" ,"c"},
        {"5OC" ,"c"},
        {"5PC" ,"c"},
        {"5PY" ,"t"},
        {"5SE" ,"c"},
        {"5SI" ,"u"},
        {"5UA" ,"a"},
        {"63G" ,"g"},
        {"63H" ,"g"},
        {"64P" ,"t"},
        {"64T" ,"t"},
        {"6AP" ,"a"},
        {"6CF" ,"c"},
        {"6GO" ,"g"},
        {"6GU" ,"g"},
        {"6HA" ,"a"},
        {"6HC" ,"c"},
        {"6HG" ,"g"},
        {"6HT" ,"t"},
        {"6IA" ,"a"},
        {"6MA" ,"a"},
        {"6MP" ,"a"},
        {"6MZ" ,"a"},
        {"6OG" ,"g"},
        {"6PO" ,"g"},
        {"70U" ,"t"},
        {"7DA" ,"a"},
        {"7GU" ,"g"},
        {"7MG" ,"g"},
        {"84T" ,"a"},
        {"8AG" ,"g"},
        {"8AN" ,"a"},
        {"8BA" ,"a"},
        {"8DG" ,"g"},
        {"8FG" ,"g"},
        {"8MG" ,"g"},
        {"8OG" ,"g"},
        {"9DG" ,"u"},
        {"A1P" ,"g"},
        {"A23" ,"a"},
        {"A2F" ,"a"},
        {"A2L" ,"a"},
        {"A2M" ,"a"},
        {"A38" ,"a"},
        {"A3P" ,"a"},
        {"A40" ,"a"},
        {"A43" ,"a"},
        {"A44" ,"a"},
        {"A47" ,"a"},
        {"A5L" ,"a"},
        {"A5M" ,"c"},
        {"A5O" ,"a"},
        {"A66" ,"a"},
        {"A6A" ,"a"},
        {"A6C" ,"c"},
        {"A6G" ,"g"},
        {"A6U" ,"u"},
        {"A9Z" ,"a"},
        {"ABR" ,"a"},
        {"ABS" ,"a"},
        {"ACP" ,"a"},
        {"AD2" ,"a"},
        {"ADE" ,"a"},
        {"ADI" ,"a"},
        {"ADK" ,"a"},
        {"ADP" ,"a"},
        {"AET" ,"a"},
        {"AF2" ,"a"},
        {"AG9" ,"c"},
        {"AGD" ,"g"},
        {"AGS" ,"a"},
        {"AMO" ,"a"},
        {"AMP" ,"a"},
        {"ANG" ,"g"},
        {"ANP" ,"a"},
        {"ANZ" ,"a"},
        {"AP7" ,"a"},
        {"APC" ,"a"},
        {"APN" ,"a"},
        {"AS" ,"a"},
        {"AT7" ,"a"},
        {"ATD" ,"t"},
        {"ATL" ,"t"},
        {"ATM" ,"t"},
        {"ATP" ,"a"},
        {"AVC" ,"a"},
        {"AZT" ,"t"},
        {"B7C" ,"c"},
        {"BA2" ,"a"},
        {"BGM" ,"g"},
        {"BGR" ,"g"},
        {"BLS" ,"c"},
        {"BOE" ,"t"},
        {"BRG" ,"g"},
        {"BRU" ,"u"},
        {"C2E" ,"g"},
        {"C2L" ,"c"},
        {"C2S" ,"c"},
        {"C31" ,"c"},
        {"C34" ,"c"},
        {"C36" ,"c"},
        {"C37" ,"c"},
        {"C38" ,"c"},
        {"C42" ,"c"},
        {"C43" ,"c"},
        {"C45" ,"c"},
        {"C46" ,"c"},
        {"C49" ,"c"},
        {"C4S" ,"c"},
        {"C5P" ,"c"},
        {"C66" ,"c"},
        {"C6G" ,"g"},
        {"CAR" ,"c"},
        {"CBR" ,"c"},
        {"CBV" ,"c"},
        {"CCC" ,"c"},
        {"CFL" ,"c"},
        {"CFZ" ,"c"},
        {"CG1" ,"g"},
        {"CH" ,"c"},
        {"CH1" ,"c"},
        {"CM0" ,"u"},
        {"CMP" ,"a"},
        {"CMR" ,"c"},
        {"CP1" ,"c"},
        {"CPN" ,"c"},
        {"CSG" ,"c"},
        {"CSL" ,"c"},
        {"CSM" ,"u"},
        {"CTG" ,"t"},
        {"CTP" ,"c"},
        {"CUD" ,"c"},
        {"CX2" ,"c"},
        {"CYT" ,"c"},
        {"D3N" ,"u"},
        {"D3T" ,"t"},
        {"D5M" ,"a"},
        {"DAD" ,"a"},
        {"DCM" ,"c"},
        {"DCP" ,"c"},
        {"DCT" ,"c"},
        {"DCZ" ,"c"},
        {"DDG" ,"g"},
        {"DDS" ,"a"},
        {"DDY" ,"c"},
        {"DG3" ,"g"},
        {"DG8" ,"g"},
        {"DGP" ,"g"},
        {"DGT" ,"g"},
        {"DI" ,"g"},
        {"DJF" ,"a"},
        {"DNR" ,"c"},
        {"DOC" ,"c"},
        {"DTP" ,"a"},
        {"DU" ,"u"},
        {"DUP" ,"u"},
        {"DUR" ,"u"},
        {"DUT" ,"u"},
        {"DUZ" ,"u"},
        {"DX4" ,"g"},
        {"DZ4" ,"a"},
        {"DZM" ,"a"},
        {"E" ,"a"},
        {"E1X" ,"g"},
        {"EDA" ,"a"},
        {"EDC" ,"c"},
        {"EEM" ,"a"},
        {"EFG" ,"g"},
        {"EHG" ,"g"},
        {"EIT" ,"t"},
        {"EPE" ,"c"},
        {"F2A" ,"a"},
        {"F3A" ,"a"},
        {"F3H" ,"t"},
        {"F4H" ,"t"},
        {"F5H" ,"t"},
        {"F6H" ,"t"},
        {"FA2" ,"a"},
        {"FAG" ,"g"},
        {"FAX" ,"a"},
        {"FDG" ,"g"},
        {"FHA" ,"a"},
        {"FHG" ,"g"},
        {"FHU" ,"u"},
        {"FMG" ,"g"},
        {"FMU" ,"t"},
        {"FOX" ,"g"},
        {"FYA" ,"a"},
        {"G1C" ,"g"},
        {"G1M" ,"g"},
        {"G2C" ,"g"},
        {"G2L" ,"g"},
        {"G2M" ,"g"},
        {"G2P" ,"g"},
        {"G2S" ,"g"},
        {"G31" ,"g"},
        {"G36" ,"g"},
        {"G38" ,"g"},
        {"G46" ,"g"},
        {"G47" ,"g"},
        {"G48" ,"g"},
        {"G49" ,"g"},
        {"G7M" ,"g"},
        {"GAO" ,"g"},
        {"GBR" ,"g"},
        {"GCK" ,"c"},
        {"GCP" ,"g"},
        {"GDO" ,"g"},
        {"GDP" ,"g"},
        {"GF2" ,"g"},
        {"GFC" ,"g"},
        {"GFF" ,"g"},
        {"GFH" ,"g"},
        {"GFL" ,"g"},
        {"GFM" ,"g"},
        {"GGH" ,"g"},
        {"GH3" ,"g"},
        {"GMP" ,"g"},
        {"GMS" ,"g"},
        {"GMU" ,"t"},
        {"GN7" ,"g"},
        {"GNE" ,"g"},
        {"GNG" ,"g"},
        {"GNP" ,"g"},
        {"GOM" ,"a"},
        {"GPN" ,"g"},
        {"GRB" ,"g"},
        {"GRC" ,"g"},
        {"GS" ,"g"},
        {"GSR" ,"g"},
        {"GSS" ,"g"},
        {"GSU" ,"a"},
        {"GTF" ,"c"},
        {"GTP" ,"g"},
        {"GUN" ,"g"},
        {"GX1" ,"g"},
        {"H2U" ,"u"},
        {"HEU" ,"u"},
        {"HGL" ,"g"},
        {"HMU" ,"u"},
        {"HN0" ,"g"},
        {"HN1" ,"g"},
        {"HPA" ,"g"},
        {"HXB" ,"t"},
        {"HXZ" ,"t"},
        {"I" ,"g"},
        {"IC" ,"u"},
        {"IG" ,"a"},
        {"IGU" ,"a"},
        {"IMC" ,"t"},
        {"IPN" ,"u"},
        {"IU" ,"u"},
        {"JDT" ,"t"},
        {"KAG" ,"g"},
        {"KIR" ,"u"},
        {"L8P" ,"c"},
        {"LCA" ,"a"},
        {"LCC" ,"c"},
        {"LCG" ,"g"},
        {"LGP" ,"g"},
        {"LHC" ,"c"},
        {"LKC" ,"c"},
        {"LLP" ,"u"},
        {"LMS" ,"a"},
        {"M1G" ,"g"},
        {"M2G" ,"g"},
        {"M5M" ,"c"},
        {"MA6" ,"a"},
        {"MA7" ,"a"},
        {"MAD" ,"a"},
        {"MAU" ,"u"},
        {"MCY" ,"c"},
        {"MDJ" ,"c"},
        {"MDK" ,"c"},
        {"MDQ" ,"c"},
        {"MDU" ,"t"},
        {"MDV" ,"a"},
        {"ME6" ,"c"},
        {"MFT" ,"t"},
        {"MG1" ,"g"},
        {"MGT" ,"g"},
        {"MIA" ,"a"},
        {"MMT" ,"t"},
        {"MNU" ,"t"},
        {"MRG" ,"g"},
        {"MSP" ,"a"},
        {"MTU" ,"g"},
        {"N2G" ,"g"},
        {"N5C" ,"c"},
        {"N5M" ,"c"},
        {"N6G" ,"a"},
        {"N6M" ,"a"},
        {"N79" ,"a"},
        {"NEA" ,"a"},
        {"NMS" ,"t"},
        {"NMT" ,"t"},
        {"NYM" ,"t"},
        {"O2C" ,"c"},
        {"O2G" ,"g"},
        {"OGX" ,"g"},
        {"OHU" ,"u"},
        {"OMC" ,"c"},
        {"OMG" ,"g"},
        {"OMU" ,"u"},
        {"ONE" ,"u"},
        {"OXG" ,"g"},
        {"P" ,"g"},
        {"P2T" ,"t"},
        {"P2U" ,"u"},
        {"P5P" ,"a"},
        {"PBT" ,"t"},
        {"PDU" ,"t"},
        {"PGN" ,"g"},
        {"PGP" ,"g"},
        {"PLR" ,"t"},
        {"PPU" ,"a"},
        {"PPW" ,"g"},
        {"PPZ" ,"a"},
        {"PQ0" ,"g"},
        {"PQ1" ,"g"},
        {"PRF" ,"g"},
        {"PRN" ,"a"},
        {"PSD" ,"a"},
        {"PST" ,"t"},
        {"PSU" ,"u"},
        {"PU" ,"a"},
        {"PUY" ,"a"},
        {"PVX" ,"t"},
        {"PYO" ,"u"},
        {"QBT" ,"t"},
        {"QSI" ,"a"},
        {"QUO" ,"g"},
        {"R" ,"a"},
        {"RCE" ,"u"},
        {"RIA" ,"a"},
        {"RMP" ,"a"},
        {"RPC" ,"c"},
        {"RSP" ,"c"},
        {"RSQ" ,"c"},
        {"RUS" ,"u"},
        {"S2M" ,"t"},
        {"S4A" ,"a"},
        {"S4C" ,"c"},
        {"S4G" ,"g"},
        {"S6G" ,"g"},
        {"SAH" ,"a"},
        {"SAM" ,"a"},
        {"SC" ,"c"},
        {"SDG" ,"g"},
        {"SFG" ,"a"},
        {"SMP" ,"a"},
        {"SMT" ,"t"},
        {"SOS" ,"g"},
        {"SPT" ,"t"},
        {"SRA" ,"a"},
        {"SSA" ,"a"},
        {"SSJ" ,"u"},
        {"SSU" ,"u"},
        {"SUR" ,"u"},
        {"T23" ,"t"},
        {"T2S" ,"t"},
        {"T2T" ,"t"},
        {"T32" ,"t"},
        {"T38" ,"t"},
        {"T39" ,"t"},
        {"T3P" ,"t"},
        {"T41" ,"t"},
        {"T48" ,"t"},
        {"T49" ,"t"},
        {"T4S" ,"t"},
        {"T5O" ,"u"},
        {"T5S" ,"u"},
        {"T66" ,"t"},
        {"T6A" ,"a"},
        {"TAF" ,"t"},
        {"TCP" ,"t"},
        {"TCY" ,"a"},
        {"TDR" ,"u"},
        {"TDY" ,"t"},
        {"TED" ,"t"},
        {"TEP" ,"g"},
        {"TFE" ,"t"},
        {"TFF" ,"t"},
        {"TFO" ,"a"},
        {"TFT" ,"t"},
        {"TGP" ,"g"},
        {"THM" ,"t"},
        {"THP" ,"t"},
        {"THX" ,"c"},
        {"TLB" ,"t"},
        {"TLC" ,"t"},
        {"TLN" ,"t"},
        {"TM2" ,"t"},
        {"TMP" ,"t"},
        {"TNV" ,"a"},
        {"TP1" ,"t"},
        {"TPC" ,"c"},
        {"TPN" ,"t"},
        {"TSB" ,"a"},
        {"TSP" ,"t"},
        {"TT" ,"t"},
        {"TTD" ,"t"},
        {"TTE" ,"t"},
        {"TTI" ,"u"},
        {"TTM" ,"t"},
        {"TTP" ,"t"},
        {"TX2" ,"c"},
        {"U2L" ,"t"},
        {"U31" ,"u"},
        {"U33" ,"u"},
        {"U34" ,"u"},
        {"U36" ,"u"},
        {"U37" ,"u"},
        {"U3H" ,"u"},
        {"U5P" ,"u"},
        {"U8U" ,"u"},
        {"UAR" ,"u"},
        {"UBB" ,"u"},
        {"UBD" ,"u"},
        {"UBI" ,"u"},
        {"UCL" ,"u"},
        {"UD5" ,"u"},
        {"UDP" ,"u"},
        {"UF2" ,"u"},
        {"UFP" ,"u"},
        {"UFR" ,"t"},
        {"UFT" ,"u"},
        {"UMP" ,"u"},
        {"UMS" ,"u"},
        {"UMX" ,"u"},
        {"UPC" ,"u"},
        {"UPE" ,"u"},
        {"UPG" ,"u"},
        {"UPS" ,"u"},
        {"UPV" ,"u"},
        {"UR3" ,"u"},
        {"URA" ,"u"},
        {"URI" ,"u"},
        {"URX" ,"u"},
        {"US1" ,"u"},
        {"US2" ,"t"},
        {"US3" ,"t"},
        {"US4" ,"t"},
        {"US5" ,"u"},
        {"USM" ,"u"},
        {"UTP" ,"u"},
        {"UVX" ,"u"},
        {"UZR" ,"u"},
        {"VAA" ,"a"},
        {"X" ,"g"},
        {"XAD" ,"a"},
        {"XAE" ,"u"},
        {"XAL" ,"a"},
        {"XAN" ,"g"},
        {"XAR" ,"a"},
        {"XCL" ,"c"},
        {"XCR" ,"c"},
        {"XCT" ,"c"},
        {"XCY" ,"c"},
        {"XG4" ,"g"},
        {"XGA" ,"u"},
        {"XGL" ,"g"},
        {"XGR" ,"g"},
        {"XGU" ,"g"},
        {"XJS" ,"c"},
        {"XTF" ,"t"},
        {"XTH" ,"t"},
        {"XTL" ,"t"},
        {"XTR" ,"t"},
        {"XUA" ,"a"},
        {"XUG" ,"g"},
        {"Y" ,"a"},
        {"YCO" ,"u"},
        {"YG" ,"g"},
        {"YMP" ,"a"},
        {"YYG" ,"g"},
        {"Z" ,"u"},
        {"ZAD" ,"a"},
        {"ZAN" ,"a"},
        {"ZBC" ,"c"},
        {"ZBU" ,"u"},
        {"ZCY" ,"c"},
        {"ZDU" ,"t"},
        {"ZGU" ,"g"},
        {"ZHP" ,"u"},
        {"ZP4" ,"t"},
        {"ZTH" ,"t"},
        {"A", "A"},
        {"U", "U"},
        {"G", "G"},
        {"C", "C"},
        // {"1MA", "A" },
        // {"1MG", "G" },
        // {"2MG", "G" },
        // {"5BU", "U" },
        // {"5MC", "C" },
        // {"5MU", "U" },
        // {"6IA", "A" },
        // {"7MG", "G" },
        // {"A23", "A" },
        // {"CCC", "C" },
        // {"FHU", "U" },
        // {"FMU", "U" },
        // {"H2U", "U" },
        // {"M2G", "G" },
        // {"OMC", "C" },
        // {"OMG", "G" },
        // {"PPU", "U" },
        // {"PSU", "U" },
        // {"UD5", "U" },
        // {"CCC", "C" },
        // {"YG", "G" },
        // {"rC","C"},
        // {"rU","U"},
        // {"rG","G"},
        // {"rA","A"},
        // {"GTP", "G"},
        // {"GDP", "G"},
        // {"YYG", "G"}
    });


// ==============================================
// smcra/RNA
// Deal with old/new PDB conventions
// ==============================================

    std::vector<std::string> rna_sideatom({
        "A_C2",
        "A_C4",
        "A_C5",
        "A_C6",
        "A_C8",
        "A_N1",
        "A_N3",
        "A_N6",
        "A_N7",
        "A_N9",
        "C_C2",
        "C_C4",
        "C_C5",
        "C_C6",
        "C_N1",
        "C_N3",
        "C_N4",
        "C_O2",
        "G_C2",
        "G_C4",
        "G_C5",
        "G_C6",
        "G_C8",
        "G_N1",
        "G_N2",
        "G_N3",
        "G_N7",
        "G_N9",
        "G_O6",
        "U_C2",
        "U_C4",
        "U_C5",
        "U_C6",
        "U_N1",
        "U_N3",
        "U_O2",
        "U_O4"
    });

    bool is_rna_sideatom(const std::string& atype_s){
        bool flag = false;

        if (std::find(rna_sideatom.begin(), rna_sideatom.end(), atype_s) != rna_sideatom.end()){
            flag = true;
        }

        return flag;
    } 


    std::unordered_map<std::string,std::string> old_2_new({
        {"C1*", "C1'"},
        {"C2*", "C2'"},
        {"C3*", "C3'"},
        {"C4*", "C4'"},
        {"C5*", "C5'"},
        {"O2*", "O2'"},
        {"O3*", "O3'"},
        {"O4*", "O4'"},
        {"O5*", "O5'"},
        {"O1P", "OP1"},
        {"O2P", "OP2"},
        {"rC","C"},
        {"rU","U"},
        {"rG","G"},
        {"rA","A"},

        // add GTP -> G
        {"GTP", "G"},
        {"GDP", "G"},
    });




// ==============================================
// neighbor atom maps in RNA
// ==============================================

    std::unordered_map<std::string, std::vector<std::string>> rna_atom_neighbors({
        {"A_N1",{"C2","C6"}},
        {"A_N3",{"C2","C4"}},
        {"A_N6",{"C6"}},
        {"A_N7",{"C5","C8"}},
        {"A_OP1",{"P"}},
        {"A_OP2",{"P"}},
        {"C_N3",{"C2","C4"}},
        {"C_N4",{"C4"}},
        {"C_O2",{"C2"}},
        {"C_OP1",{"P"}},
        {"C_OP2",{"P"}},
        {"G_N1",{"C2","C6"}},
        {"G_N2",{"C2"}},
        {"G_N3",{"C2","C4"}},
        {"G_N7",{"C5","C8"}},
        {"G_O6",{"C6"}},
        {"G_OP1",{"P"}},
        {"G_OP2",{"P"}},
        {"U_N3",{"C2","C4"}},
        {"U_O2",{"C2"}},
        {"U_O4",{"C4"}},
        {"U_OP1",{"P"}},
        {"U_OP2",{"P"}},
        {"A_O2'",{"C2'"}},
        {"A_O3'",{"C3'","P_n"}},
        {"A_O4'",{"C1'","C4'"}},
        {"A_O5'",{"P","C5'"}},
        {"C_O2'",{"C2'"}},
        {"C_O3'",{"C3'","P_n"}},
        {"C_O4'",{"C1'","C4'"}},
        {"C_O5'",{"P","C5'"}},
        {"G_O2'",{"C2'"}},
        {"G_O3'",{"C3'","P_n"}},
        {"G_O4'",{"C1'","C4'"}},
        {"G_O5'",{"P","C5'"}},
        {"U_O2'",{"C2'"}},
        {"U_O3'",{"C3'","P_n"}},
        {"U_O4'",{"C1'","C4'"}},
        {"U_O5'",{"P","C5'"}},
    });


// ==============================================
// Protein Triple code to single char code
// ==============================================


    std::unordered_map<std::string, std::string> prot_tri2sin({
        {"ALA","A"},
        {"CYS","C"},
        {"ASP","D"},
        {"GLU","E"},
        {"PHE","F"},
        {"GLY","G"},
        {"HIS","H"},
        {"ILE","I"},
        {"LYS","K"},
        {"LEU","L"},
        {"MET","M"},
        {"ASN","N"},
        {"PRO","P"},
        {"GLN","Q"},
        {"ARG","R"},
        {"SER","S"},
        {"THR","T"},
        {"VAL","V"},
        {"TRP","W"},
        {"TYR","Y"},
        {"SEC","U"},
        {"PYL","O"},
        {"ASX","B"},
        {"GLX","Z"},
        {"XLE","J"},
        {"XAA","X"},
    });


//  ==============================================
//  RNA polar atom type encoding
//  RNA {atom name,int}  <-> {int,atom name}
//             polartype <-> typepolar
//  ==============================================

    std::unordered_map<std::string, int> polartype({
        {"A_N1",0},
        {"A_N3",1},
        {"A_N6",2},
        {"A_N7",3},
        {"A_OP1",4},
        {"A_OP2",5},
        {"C_N3",6},
        {"C_N4",7},
        {"C_O2",8},
        {"C_OP1",9},
        {"C_OP2",10},
        {"G_N1",11},
        {"G_N2",12},
        {"G_N3",13},
        {"G_N7",14},
        {"G_O6",15},
        {"G_OP1",16},
        {"G_OP2",17},
        {"U_N3",18},
        {"U_O2",19},
        {"U_O4",20},
        {"U_OP1",21},
        {"U_OP2",22},
        {"A_O2'",23},
        {"A_O3'",24},
        {"A_O4'",25},
        {"A_O5'",26},
        {"C_O2'",27},
        {"C_O3'",28},
        {"C_O4'",29},
        {"C_O5'",30},
        {"G_O2'",31},
        {"G_O3'",32},
        {"G_O4'",33},
        {"G_O5'",34},
        {"U_O2'",35},
        {"U_O3'",36},
        {"U_O4'",37},
        {"U_O5'",38},
    });
    std::unordered_map<int, std::string> typepolar({
        {0,"A_N1"},
        {1,"A_N3"},
        {2,"A_N6"},
        {3,"A_N7"},
        {4,"A_OP1"},
        {5,"A_OP2"},
        {6,"C_N3"},
        {7,"C_N4"},
        {8,"C_O2"},
        {9,"C_OP1"},
        {10,"C_OP2"},
        {11,"G_N1"},
        {12,"G_N2"},
        {13,"G_N3"},
        {14,"G_N7"},
        {15,"G_O6"},
        {16,"G_OP1"},
        {17,"G_OP2"},
        {18,"U_N3"},
        {19,"U_O2"},
        {20,"U_O4"},
        {21,"U_OP1"},
        {22,"U_OP2"},
        {23,"A_O2'"},
        {24,"A_O3'"},
        {25,"A_O4'"},
        {26,"A_O5'"},
        {27,"C_O2'"},
        {28,"C_O3'"},
        {29,"C_O4'"},
        {30,"C_O5'"},
        {31,"G_O2'"},
        {32,"G_O3'"},
        {33,"G_O4'"},
        {34,"G_O5'"},
        {35,"U_O2'"},
        {36,"U_O3'"},
        {37,"U_O4'"},
        {38,"U_O5'"},
    });

    


//  ==============================================
//  RNA atom type encoding
//  RNA {atom name,int} <-> {int,atom name}
//             atomtype <-> typeatom
//  ==============================================
    std::unordered_map<std::string,int> atomtype({
        {"A_C1'", 0},
        {"A_C2",1},
        {"A_C2'",2},
        {"A_C3'",3},
        {"A_C4",4},
        {"A_C4'",5},
        {"A_C5",6},
        {"A_C5'",7},
        {"A_C6",8},
        {"A_C8",9},
        {"A_N1",10},
        {"A_N3",11},
        {"A_N6",12},
        {"A_N7",13},
        {"A_N9",14},
        {"A_O2'",15},
        {"A_O3'",16},
        {"A_O4'",17},
        {"A_O5'",18},
        {"A_OP1",19},
        {"A_OP2",20},
        {"A_P",21},
        {"C_C1'",22},
        {"C_C2",23},
        {"C_C2'",24},
        {"C_C3'",25},
        {"C_C4",26},
        {"C_C4'",27},
        {"C_C5",28},
        {"C_C5'",29},
        {"C_C6",30},
        {"C_N1",31},
        {"C_N3",32},
        {"C_N4",33},
        {"C_O2",34},
        {"C_O2'",35},
        {"C_O3'",36},
        {"C_O4'",37},
        {"C_O5'",38},
        {"C_OP1",39},
        {"C_OP2",40},
        {"C_P",41},
        {"G_C1'",42},
        {"G_C2",43},
        {"G_C2'",44},
        {"G_C3'",45},
        {"G_C4",46},
        {"G_C4'",47},
        {"G_C5",48},
        {"G_C5'",49},
        {"G_C6",50},
        {"G_C8",51},
        {"G_N1",52},
        {"G_N2",53},
        {"G_N3",54},
        {"G_N7",55},
        {"G_N9",56},
        {"G_O2'",57},
        {"G_O3'",58},
        {"G_O4'",59},
        {"G_O5'",60},
        {"G_O6",61},
        {"G_OP1",62},
        {"G_OP2",63},
        {"G_P",64},
        {"U_C1'",65},
        {"U_C2",66},
        {"U_C2'",67},
        {"U_C3'",68},
        {"U_C4",69},
        {"U_C4'",70},
        {"U_C5",71},
        {"U_C5'",72},
        {"U_C6",73},
        {"U_N1",74},
        {"U_N3",75},
        {"U_O2",76},
        {"U_O2'",77},
        {"U_O3'",78},
        {"U_O4",79},
        {"U_O4'",80},
        {"U_O5'",81},
        {"U_OP1",82},
        {"U_OP2",83},
        {"U_P",84},
    });

    std::unordered_map<int, std::string> typeatom({
        {0,"A_C1'"},
        {1,"A_C2"},
        {2,"A_C2'"},
        {3,"A_C3'"},
        {4,"A_C4"},
        {5,"A_C4'"},
        {6,"A_C5"},
        {7,"A_C5'"},
        {8,"A_C6"},
        {9,"A_C8"},
        {10,"A_N1"},
        {11,"A_N3"},
        {12,"A_N6"},
        {13,"A_N7"},
        {14,"A_N9"},
        {15,"A_O2'"},
        {16,"A_O3'"},
        {17,"A_O4'"},
        {18,"A_O5'"},
        {19,"A_OP1"},
        {20,"A_OP2"},
        {21,"A_P"},
        {22,"C_C1'"},
        {23,"C_C2"},
        {24,"C_C2'"},
        {25,"C_C3'"},
        {26,"C_C4"},
        {27,"C_C4'"},
        {28,"C_C5"},
        {29,"C_C5'"},
        {30,"C_C6"},
        {31,"C_N1"},
        {32,"C_N3"},
        {33,"C_N4"},
        {34,"C_O2"},
        {35,"C_O2'"},
        {36,"C_O3'"},
        {37,"C_O4'"},
        {38,"C_O5'"},
        {39,"C_OP1"},
        {40,"C_OP2"},
        {41,"C_P"},
        {42,"G_C1'"},
        {43,"G_C2"},
        {44,"G_C2'"},
        {45,"G_C3'"},
        {46,"G_C4"},
        {47,"G_C4'"},
        {48,"G_C5"},
        {49,"G_C5'"},
        {50,"G_C6"},
        {51,"G_C8"},
        {52,"G_N1"},
        {53,"G_N2"},
        {54,"G_N3"},
        {55,"G_N7"},
        {56,"G_N9"},
        {57,"G_O2'"},
        {58,"G_O3'"},
        {59,"G_O4'"},
        {60,"G_O5'"},
        {61,"G_O6"},
        {62,"G_OP1"},
        {63,"G_OP2"},
        {64,"G_P"},
        {65,"U_C1'"},
        {66,"U_C2"},
        {67,"U_C2'"},
        {68,"U_C3'"},
        {69,"U_C4"},
        {70,"U_C4'"},
        {71,"U_C5"},
        {72,"U_C5'"},
        {73,"U_C6"},
        {74,"U_N1"},
        {75,"U_N3"},
        {76,"U_O2"},
        {77,"U_O2'"},
        {78,"U_O3'"},
        {79,"U_O4"},
        {80,"U_O4'"},
        {81,"U_O5'"},
        {82,"U_OP1"},
        {83,"U_OP2"},
        {84,"U_P"},
    });

//  ==============================================
//  functions
//  ==============================================

    bool is_rna_polar_atom(const std::string& atype){
        bool flag = false;

        if (rna_atom_neighbors.find(atype) != pdb_utils::rna_atom_neighbors.end()){
            flag = true;
        }
        return flag;
    }

    int get_polartype_int(std::string atype_s){
        if (polartype.find(atype_s) != polartype.end()){

            return polartype[atype_s];
        }
        else{
            std::cerr << "polartype error: "<<  atype_s << " not found" << std::endl;
            return -1;
        }        
    }

    int get_atomtype_int(std::string atype_s){
        if (atomtype.find(atype_s) != atomtype.end()){

            return atomtype[atype_s];
        }
        else{
            std::cerr << "atomtype error " <<atype_s << " not found" << std::endl;
            return -1;
        }
    }

// pdb format conversion, eg C4* -> C4', see old_2_new
    std::string format_rna(const std::string oldstr){
        std::string newstr = oldstr;
        auto search = old_2_new.find(oldstr);
        if(search != old_2_new.end()){
            newstr = search->second;
        }
        return newstr;
    }

    std::string protein_tri2sin(const std::string &str_tri){
        auto search = prot_tri2sin.find(str_tri);
        if(search != prot_tri2sin.end()){
            return search->second;
        }
        else {
            std::cerr << &str_tri << " not found" << std::endl;
            return "X";
        }

    }

    // 0 Protein
    // 1 RNA
    // 2 other
    int guess_ctype(const std::string& resname){

        int type = -1;

        auto search = prot_tri2sin.find(resname);
        if (search != prot_tri2sin.end()){
            type = 0;
        } 
        else {
            std::unordered_set<std::string> rna_nt = {"A","U","G","C"};

            if (rna_nt.count(resname)){
                type = 1;
            }
            else{
                type = 2;
            }

        }

        return type;
    }

    std::string rna_tri2sin(const std::string &str_tri){
        auto search = rna_specials.find(str_tri);
        if(search != rna_specials.end()){
            return search->second;
        }
        else {
            std::cerr << "RNA NT " << str_tri << " not found" << std::endl;
            return "X";
        }        
    }
}
